public class PowerPlant {
	private Generator generator;
	private Reactor reactor;
	private CoolingSystem coolingSystem;
	private ControlRoom controlRoom;

	public PowerPlant(Generator generator, Reactor reactor, CoolingSystem coolingSystem, ControlRoom controlRoom) {
		setGenerator(generator);
		setReactor(reactor);
		setCoolingSystem(coolingSystem);
		setControlRoom(controlRoom);

		// Add all the rooms to the control room
		getControlRoom().addControlledRoom(getGenerator());
		getControlRoom().addControlledRoom(getCoolingSystem());
		getControlRoom().addControlledRoom(getReactor());
	}

	public Generator getGenerator() {
		return this.generator;
	}

	public void setGenerator(Generator generator) {
		this.generator = generator;
	}

	public ControlRoom getControlRoom() {
		return this.controlRoom;
	}

	public void setControlRoom(ControlRoom controlRoom) {
		this.controlRoom = controlRoom;
	}

	public Reactor getReactor() {
		return this.reactor;
	}

	public void setReactor(Reactor reactor) {
		this.reactor = reactor;
	}

	public CoolingSystem getCoolingSystem() {
		return this.coolingSystem;
	}

	public void setCoolingSystem(CoolingSystem coolingSystem) {
		this.coolingSystem = coolingSystem;
	}

	/**
	 * Runs the power plant.
	 * Returns all the energy generated in return
	 *
	 * @param temperature The temperature of the power plant
	 * @param time        The time the power plant runs at the above temperature
	 * @return The total amount of energy produced
	 */
	public double run(double temperature, double time) {
		double totalSteam = 0;
		double totalResidualHeat = 0;

		// Getting all the steam and residual heat generated by the reactor
		try {
			for (Core core : this.reactor.getCores()) {
				SplitResult splitResult = core.split(temperature, time);
				totalSteam += splitResult.getHeatAmount();
				totalResidualHeat += splitResult.getResidualHeat();
			}
		} catch (MeltdownException meltdownException) {
			// Here smth should happen (like stop the power plant or smth)
			System.out.println("CHERNOBYL in EMMEN!!!");
		}

		// Generating energy
		this.generator.generateEnergy(totalSteam);

		// Cooling the reactor
		this.coolingSystem.abductResidualHeat(totalResidualHeat);

		return this.generator.getTotalAmountEnergy();
	}
}
